import React, { useState, useEffect } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { Plus, Users, Copy, QrCode, BarChart3 } from 'lucide-react';

interface Class {
  id: string;
  name: string;
  grade: string;
  class_code: string;
  created_at: string;
}

interface Student {
  id: string;
  nickname: string;
  created_at: string;
}

const TeacherDashboard = () => {
  const [classes, setClasses] = useState<Class[]>([]);
  const [selectedClass, setSelectedClass] = useState<Class | null>(null);
  const [students, setStudents] = useState<Student[]>([]);
  const [loading, setLoading] = useState(true);
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [className, setClassName] = useState('');
  const [grade, setGrade] = useState('');
  const [creating, setCreating] = useState(false);
  const { user, signOut } = useAuth();
  const { toast } = useToast();

  useEffect(() => {
    if (user) {
      fetchClasses();
    }
  }, [user]);

  useEffect(() => {
    if (selectedClass) {
      fetchStudents(selectedClass.id);
    }
  }, [selectedClass]);

  const fetchClasses = async () => {
    try {
      const { data, error } = await supabase
        .from('classes')
        .select('*')
        .eq('teacher_id', user?.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setClasses(data || []);
      if ((data || []).length > 0 && !selectedClass) {
        setSelectedClass(data[0]);
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const fetchStudents = async (classId: string) => {
    try {
      const { data, error } = await supabase
        .from('students')
        .select('*')
        .eq('class_id', classId)
        .order('created_at', { ascending: true });

      if (error) throw error;
      setStudents(data || []);
    } catch (error: any) {
      console.error('Error fetching students:', error);
    }
  };

  const createClass = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!className.trim() || !grade.trim()) return;

    setCreating(true);
    try {
      const { data, error } = await supabase
        .from('classes')
        .insert([{
          teacher_id: user?.id,
          name: className.trim(),
          grade: grade.trim(),
          class_code: '' // Will be auto-generated by trigger
        }])
        .select()
        .single();

      if (error) throw error;

      setClasses([data, ...classes]);
      if (!selectedClass) {
        setSelectedClass(data);
      }

      toast({
        title: "Class created!",
        description: `Class code: ${data.class_code}`,
      });

      setClassName('');
      setGrade('');
      setShowCreateDialog(false);
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setCreating(false);
    }
  };

  const copyClassCode = (classCode: string) => {
    navigator.clipboard.writeText(classCode);
    toast({
      title: "Copied!",
      description: "Class code copied to clipboard",
    });
  };

  const copyJoinLink = (classCode: string) => {
    const joinLink = `${window.location.origin}/join/${classCode}`;
    navigator.clipboard.writeText(joinLink);
    toast({
      title: "Copied!",
      description: "Join link copied to clipboard",
    });
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading your dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-muted">
      <div className="container mx-auto p-6">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold">Teacher Dashboard</h1>
            <p className="text-muted-foreground">Welcome back, {user?.email}</p>
          </div>
          <Button variant="outline" onClick={signOut}>
            Sign Out
          </Button>
        </div>

        <div className="grid lg:grid-cols-3 gap-6">
          {/* Classes Sidebar */}
          <div className="lg:col-span-1">
            <Card className="bg-card/80 backdrop-blur-sm">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>My Classes</CardTitle>
                  <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>
                    <DialogTrigger asChild>
                      <Button size="sm">
                        <Plus className="h-4 w-4 mr-2" />
                        New Class
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>Create New Class</DialogTitle>
                        <DialogDescription>
                          Set up a new class to start inviting students
                        </DialogDescription>
                      </DialogHeader>
                      <form onSubmit={createClass} className="space-y-4">
                        <div>
                          <label className="text-sm font-medium">Class Name</label>
                          <Input
                            value={className}
                            onChange={(e) => setClassName(e.target.value)}
                            placeholder="e.g., Environmental Science"
                            required
                          />
                        </div>
                        <div>
                          <label className="text-sm font-medium">Grade</label>
                          <Input
                            value={grade}
                            onChange={(e) => setGrade(e.target.value)}
                            placeholder="e.g., 5th Grade"
                            required
                          />
                        </div>
                        <Button type="submit" disabled={creating} className="w-full">
                          {creating ? 'Creating...' : 'Create Class'}
                        </Button>
                      </form>
                    </DialogContent>
                  </Dialog>
                </div>
              </CardHeader>
              <CardContent>
                {classes.length === 0 ? (
                  <p className="text-muted-foreground text-center py-4">
                    No classes yet. Create your first class to get started!
                  </p>
                ) : (
                  <div className="space-y-2">
                    {classes.map((cls) => (
                      <div
                        key={cls.id}
                        className={`p-3 rounded-lg cursor-pointer transition-colors ${
                          selectedClass?.id === cls.id
                            ? 'bg-primary/10 border border-primary/20'
                            : 'bg-muted/30 hover:bg-muted/50'
                        }`}
                        onClick={() => setSelectedClass(cls)}
                      >
                        <div className="font-medium">{cls.name}</div>
                        <div className="text-sm text-muted-foreground">{cls.grade}</div>
                        <div className="text-xs font-mono mt-1 text-primary">
                          {cls.class_code}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {selectedClass ? (
              <>
                {/* Class Info */}
                <Card className="bg-card/80 backdrop-blur-sm">
                  <CardHeader>
                    <CardTitle>{selectedClass.name}</CardTitle>
                    <CardDescription>{selectedClass.grade}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <p className="text-sm font-medium">Class Code</p>
                        <div className="flex items-center space-x-2">
                          <code className="text-lg font-mono bg-muted px-3 py-1 rounded">
                            {selectedClass.class_code}
                          </code>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => copyClassCode(selectedClass.class_code)}
                          >
                            <Copy className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <p className="text-sm font-medium">Join Link</p>
                        <Button
                          variant="outline"
                          onClick={() => copyJoinLink(selectedClass.class_code)}
                          className="w-full justify-start"
                        >
                          <QrCode className="h-4 w-4 mr-2" />
                          Copy Join Link
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Students */}
                <Card className="bg-card/80 backdrop-blur-sm">
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <Users className="h-5 w-5 mr-2" />
                      Students ({students.length})
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {students.length === 0 ? (
                      <div className="text-center py-8">
                        <Users className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                        <p className="text-muted-foreground">
                          No students have joined yet. Share the class code to invite students!
                        </p>
                      </div>
                    ) : (
                      <div className="grid md:grid-cols-2 gap-4">
                        {students.map((student) => (
                          <div
                            key={student.id}
                            className="p-3 bg-muted/30 rounded-lg"
                          >
                            <div className="font-medium">{student.nickname}</div>
                            <div className="text-sm text-muted-foreground">
                              Joined {new Date(student.created_at).toLocaleDateString()}
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </CardContent>
                </Card>
              </>
            ) : (
              <Card className="bg-card/80 backdrop-blur-sm">
                <CardContent className="text-center py-12">
                  <BarChart3 className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <p className="text-muted-foreground">
                    Create a class to start managing your students and assignments
                  </p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TeacherDashboard;